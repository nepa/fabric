/** 30.09.2012 06:17 */
package fabric.module.midgen4j.rest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Properties;

import fabric.module.api.FItemHandlerBase;
import fabric.module.api.FModuleBase;
import fabric.module.midgen4j.rest.exceptions.MidGen4JRESTException;

import de.uniluebeck.sourcegen.Workspace;

/**
 * Fabric extension module for the Java Middleware Generator. This class
 * is part of the MidGen4J distribution and can be used to generate a
 * RESTful interface for the ServiceProvider class that the MidGen4J
 * base module creates.
 *
 * The generated code uses JAX-RS/Jersey to implement REST in conjunction
 * with JAXB for easy XML/JSON serialization of the JavaBeans that are
 * generated by Fabric's type generator module.
 *
 * @author seidel
 */
public class MidGen4JRESTModule implements FModuleBase
{
  /** Logger object */
  private static final Logger LOGGER = LoggerFactory.getLogger(MidGen4JRESTModule.class);

  /** Key for interface class name in properties object */
  public static final String INTERFACE_CLASS_NAME_KEY = "midgen4j.rest.interface_class_name";

  /** Key for package name in properties object */
  public static final String PACKAGE_NAME_KEY = "midgen4j.rest.package_name";

  /** Alternative key for package name */
  public static final String PACKAGE_NAME_ALT_KEY = "midgen4j.package_name";

  /** Key for base URL of REST service in properties object */
  public static final String BASE_URL_KEY = "midgen4j.rest.base_url";

  /** Key for base path of REST resource in properties object */
  public static final String BASE_PATH_KEY = "midgen4j.rest.base_path";

  /** Key for consumed serialization format in properties object */
  public static final String CONSUMED_FORMAT_KEY = "midgen4j.rest.consumed_format";

  /** Key for produced serialization format in properties object */
  public static final String PRODUCED_FORMAT_KEY = "midgen4j.rest.produced_format";

  /** Key for consumed MIME types used in properties object */
  public static final String CONSUMED_MIME_TYPES_KEY = "midgen4j.rest.consumed_mime_types";

  /** Key for produced MIME types used in properties object */
  public static final String PRODUCED_MIME_TYPES_KEY = "midgen4j.rest.produced_mime_types";

  /** Key for service provider class name in properties object */
  public static final String SERVICE_PROVIDER_CLASS_NAME_KEY = "midgen4j.rest.service_provider_class_name";

  /** Alternative key for service provider class name */
  public static final String SERVICE_PROVIDER_CLASS_NAME_ALT_KEY = "midgen4j.service_provider_class_name";

  /** Key for service provider package name in properties object */
  public static final String SERVICE_PROVIDER_PACKAGE_NAME_KEY = "midgen4j.rest.service_provider_package_name";

  /** Alternative key for service provider package name */
  public static final String SERVICE_PROVIDER_PACKAGE_NAME_ALT_KEY = "midgen4j.package_name";

  /** Properties object for module configuration */
  private Properties properties;

  /**
   * Constructor initializes the internal properties object.
   *
   * @param properties Properties object with module options
   */
  public MidGen4JRESTModule(Properties properties)
  {
    this.properties = properties;
  }

  /**
   * Helper method to return module name.
   *
   * @return Module name
   */
  @Override
  public String getName()
  {
    return "midgen4j-rest";
  }

  /**
   * Helper method to return module description.
   *
   * @return Module description
   */
  @Override
  public String getDescription()
  {
    return String.format("MidGen4J extension to create RESTful service interface. " +
            "Valid options are '%s', '%s', '%s', '%s', '%s', '%s', '%s' and '%s'. " +
            "Alternatively '%s', '%s' and '%s' can be used.",
            INTERFACE_CLASS_NAME_KEY, PACKAGE_NAME_KEY, BASE_URL_KEY,
            BASE_PATH_KEY, CONSUMED_FORMAT_KEY, PRODUCED_FORMAT_KEY,
            SERVICE_PROVIDER_CLASS_NAME_KEY, SERVICE_PROVIDER_PACKAGE_NAME_KEY,
            PACKAGE_NAME_ALT_KEY, SERVICE_PROVIDER_CLASS_NAME_ALT_KEY,
            SERVICE_PROVIDER_PACKAGE_NAME_ALT_KEY);
  }

  /**
   * This method returns a Fabric handler object for the MidGen4J REST
   * extension. The handler on its part will generate a REST interface
   * to access the central service provider class that is created by
   * the MidGen4J base module. The item handler is instantiated with
   * the current workspace and module options.
   *
   * @param workspace Workspace object for generation of REST interface
   *
   * @return List with one MidGen4JRESTHandler object
   *
   * @throws Exception Error during handler instantiation
   */
  @Override
  public ArrayList<FItemHandlerBase> getHandlers(Workspace workspace) throws Exception
  {
    this.validateProperties();

    ArrayList<FItemHandlerBase> handlers = new ArrayList<FItemHandlerBase>();
    handlers.add(new MidGen4JRESTHandler(workspace, this.properties));

    return handlers;
  }

  /**
   * This method validates all module-specific options and translates
   * them where needed. The constructor of this class is called during
   * Fabric setup. At that time, however, the Java properties file from
   * the command line is not yet processed. This is why this method must
   * not be called in the module's constructor, but in the getHandlers()
   * method.
   *
   * @throws Exception Error during validation
   */
  private void validateProperties() throws Exception
  {
    // Early exit, if properties object is null
    if (null == this.properties)
    {
      throw new IllegalStateException("Properties object is null. Maybe it was not initialized properly?");
    }

    // Check if alternative keys have been used and copy values
    this.copyAlternativeProperties();

    // Check properties
    this.checkInterfaceClassName();
    this.checkPackageName();
    this.checkBaseURL();
    this.checkBasePath();
    this.checkConsumedFormat();
    this.checkProducedFormat();
    this.checkServiceProviderClassName();
    this.checkServiceProviderPackageName();

    // Print MidGen4J-REST module properties for debug purposes
    for (String key: this.properties.stringPropertyNames())
    {
      if (key.startsWith("midgen4j.rest."))
      {
        LOGGER.debug(String.format("Property '%s' has value '%s'.", key, this.properties.getProperty(key)));
      }
    }
  }

  /**
   * Private helper method to determine which properties should be
   * used. The REST extension module can copy properties from the
   * MidGen4J base module, if appropriate values are set.
   */
  private void copyAlternativeProperties()
  {
    if (!isSet(PACKAGE_NAME_KEY) && isSet(PACKAGE_NAME_ALT_KEY))
    {
      copyProperty(PACKAGE_NAME_ALT_KEY, PACKAGE_NAME_KEY);
    }

    if (!isSet(SERVICE_PROVIDER_PACKAGE_NAME_KEY) && isSet(SERVICE_PROVIDER_PACKAGE_NAME_ALT_KEY))
    {
      copyProperty(SERVICE_PROVIDER_PACKAGE_NAME_ALT_KEY, SERVICE_PROVIDER_PACKAGE_NAME_KEY);
    }

    if (!isSet(SERVICE_PROVIDER_CLASS_NAME_KEY) && isSet(SERVICE_PROVIDER_CLASS_NAME_ALT_KEY))
    {
      copyProperty(SERVICE_PROVIDER_CLASS_NAME_ALT_KEY, SERVICE_PROVIDER_CLASS_NAME_KEY);
    }
  }

  /**
   * Private helper method to check, whether a value is set for
   * a certain key in the properties object.
   *
   * @param key Key of property to check
   *
   * @return True if property is set, false otherwise
   */
  private boolean isSet(final String key)
  {
    return (this.properties.containsKey(key) && !("").equals(this.properties.getProperty(key)));
  }

  /**
   * Private helper method to copy property from field with key
   * 'from' to another field with key 'to'.
   *
   * @param from Key of source property
   * @param to Key of target property
   */
  private void copyProperty(final String from, final String to)
  {
    this.properties.setProperty(to, this.properties.getProperty(from));
  }

  /**
   * Check parameter for the REST interface class name. This property
   * is optional. However, it is strongly recommended to provide a value,
   * because otherwise "RESTInterface" is used as default.
   */
  private void checkInterfaceClassName()
  {
    String className = this.properties.getProperty(INTERFACE_CLASS_NAME_KEY, "RESTInterface");

    // Capitalize first letter of class name
    if (null != className)
    {
      this.properties.setProperty(INTERFACE_CLASS_NAME_KEY,
              className.substring(0, 1).toUpperCase() + className.substring(1, className.length()));
    }
  }

  /**
   * Check parameter for the package name. This property is optional.
   * However, it is strongly recommended to provide a value, because
   * otherwise "de.nptech.fabric" is used as default.
   */
  private void checkPackageName()
  {
    String packageName = this.properties.getProperty(PACKAGE_NAME_KEY, "de.nptech.fabric");

    // Convert package name to lower case
    if (null != packageName)
    {
      this.properties.setProperty(PACKAGE_NAME_KEY, packageName.toLowerCase());
    }
  }

  /**
   * Check parameter for base URL of the REST service. This property is
   * optional. However, it is strongly recommended to provide a value,
   * because otherwise "http://localhost:8080/" is used as default.
   */
  private void checkBaseURL()
  {
    String baseURL = this.properties.getProperty(BASE_URL_KEY);

    // Set default base URL, if none is provided
    if (null == baseURL)
    {
      this.properties.setProperty(BASE_URL_KEY, "http://localhost:8080/");
    }
    // Add trailing slash, if it is missing
    else if (!baseURL.endsWith("/"))
    {
      this.properties.setProperty(BASE_URL_KEY, baseURL + "/");
    }
  }

  /**
   * Check parameter for base path of the REST resource (e.g. "service"
   * in "http://localhost:8080/service"). This property is optional.
   * However, it is strongly recommended to provide a value, because
   * otherwise "midgen4j" is used as default.
   */
  private void checkBasePath()
  {
    String basePath = this.properties.getProperty(BASE_PATH_KEY);

    // Set default base path, if none is provided
    if (null == basePath)
    {
      this.properties.setProperty(BASE_PATH_KEY, "midgen4j");
    }
  }

  /**
   * Check parameter for serialization format of consumed data.
   * This property is mandatory. In case of an illegal argument,
   * an exception is thrown.
   *
   * @throws Exception No or invalid properties passed to module
   */
  private void checkConsumedFormat() throws Exception
  {
    this.checkSerializationFormat(CONSUMED_FORMAT_KEY, CONSUMED_MIME_TYPES_KEY);
  }

  /**
   * Check parameter for serialization format of produced data.
   * This property is mandatory. In case of an illegal argument,
   * an exception is thrown.
   *
   * @throws Exception No or invalid properties passed to module
   */
  private void checkProducedFormat() throws Exception
  {
    this.checkSerializationFormat(PRODUCED_FORMAT_KEY, PRODUCED_MIME_TYPES_KEY);
  }

  /**
   * Check parameter for serialization format (either input or output).
   * The desired property must be "xml", "json" or "xml/json". Further
   * formats might be added later. In case of an illegal argument, an
   * exception is thrown.
   *
   * If the format identifier is correct, a string with the corresponding
   * MIME types is written to another field in the properties object
   * (e.g. "text/xml" for option "xml" and "application/json" for option
   * "json").
   *
   * @param formatKey Key for option in properties object, to read
   * desired serialization format from
   * @param mimeTypesKey Key for option in properties object, to
   * write corresponding MIME types to
   *
   * @throws Exception No or invalid properties passed to module
   */
  private void checkSerializationFormat(final String formatKey, final String mimeTypesKey) throws Exception
  {
    String format = this.properties.getProperty(formatKey);

    // No serialization format defined
    if (null == format)
    {
      throw new MidGen4JRESTException(String.format("No serialization format specified. " +
              "Please provide a valid value for option '%s'.", formatKey));
    }
    // Use XML serialization
    else if (format.toLowerCase().equals("xml"))
    {
      this.properties.setProperty(mimeTypesKey, "\"text/xml\"");
    }
    // Use JSON serialization
    else if (format.toLowerCase().equals("json"))
    {
      this.properties.setProperty(mimeTypesKey, "\"application/json\"");
    }
    // Use XML/JSON serialization
    else if (format.toLowerCase().equals("xml/json"))
    {
      this.properties.setProperty(mimeTypesKey, " { \"text/xml\", \"application/json\" } ");
    }
    // Invalid serialization format provided
    else
    {
      throw new MidGen4JRESTException(String.format("Invalid serialization format '%s'. Use one of [xml, json, xml/json].", format));
    }
  }

  /**
   * Check parameter for the service provider class name. This property
   * is optional. However, it is strongly recommended to provide a value,
   * because otherwise "ServiceProvider" is used as default.
   */
  private void checkServiceProviderClassName()
  {
    String className = this.properties.getProperty(SERVICE_PROVIDER_CLASS_NAME_KEY, "ServiceProvider");

    // Capitalize first letter of class name
    if (null != className)
    {
      this.properties.setProperty(SERVICE_PROVIDER_CLASS_NAME_KEY,
              className.substring(0, 1).toUpperCase() + className.substring(1, className.length()));
    }
  }

  /**
   * Check parameter for package name of the service provider class. This
   * property is optional. However, it is strongly recommended to provide
   * a value, because otherwise "de.nptech.fabric" is used as default.
   */
  private void checkServiceProviderPackageName()
  {
    String packageName = this.properties.getProperty(SERVICE_PROVIDER_PACKAGE_NAME_KEY, "de.nptech.fabric");

    // Convert package name to lower case
    if (null != packageName)
    {
      this.properties.setProperty(SERVICE_PROVIDER_PACKAGE_NAME_KEY, packageName.toLowerCase());
    }
  }
}
